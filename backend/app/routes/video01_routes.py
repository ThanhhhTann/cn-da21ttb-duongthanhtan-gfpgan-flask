from flask import Blueprint, request, jsonify, render_template
from backend.app.db import db
from backend.app.models import User, Video, UserPackage
from flask_jwt_extended import jwt_required, get_jwt_identity
from azure.storage.blob import BlobServiceClient
import os
import uuid
import requests
import replicate
from sqlalchemy.sql import func
import time
from flask_cors import CORS

# üîπ C·∫•u h√¨nh Azure Storage
AZURE_CONNECTION_STRING = os.getenv("AZURE_STORAGE_CONNECTION_STRING")
CONTAINER_NAME_ORIGINAL = "user-uploads"  # üìå ·∫¢nh g·ªëc ƒë·ªÉ t·∫°o video
CONTAINER_NAME_PROCESSED = "video-no-sound"  # üìå Video sau khi t·∫°o
blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)

# üîπ API Token c·ªßa Replicate
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

video01_blueprint = Blueprint("video01", __name__)
CORS(video01_blueprint)  # ‚úÖ Cho ph√©p t·∫•t c·∫£ origin truy c·∫≠p API

# ‚úÖ **API: T·∫£i ·∫£nh l√™n Azure Storage**
@video01_blueprint.route("/upload", methods=["POST"])
@jwt_required()
def upload_image():
    user_id = get_jwt_identity()
    user = User.query.get(user_id)

    if not user:
        return jsonify({"error": "User kh√¥ng t·ªìn t·∫°i!"}), 400

    file = request.files.get("image")
    if not file:
        return jsonify({"error": "Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c t·∫£i l√™n!"}), 400

    # ‚úÖ T·∫°o t√™n file ng·∫´u nhi√™n
    blob_name = f"{uuid.uuid4()}.jpg"

    # ‚úÖ Upload ·∫£nh l√™n Azure Storage
    blob_client = blob_service_client.get_blob_client(container=CONTAINER_NAME_ORIGINAL, blob=blob_name)
    blob_client.upload_blob(file.read(), overwrite=True)

    image_url = f"https://{blob_service_client.account_name}.blob.core.windows.net/{CONTAINER_NAME_ORIGINAL}/{blob_name}"

    return jsonify({"message": "·∫¢nh ƒë√£ t·∫£i l√™n th√†nh c√¥ng!", "image_url": image_url})

# ‚úÖ **API: G·ª≠i prompt ƒë·∫øn Replicate ƒë·ªÉ t·∫°o video**
@video01_blueprint.route("/generate-video", methods=["POST"])
@jwt_required()
def generate_video():
    data = request.json
    prompt = data.get("prompt")
    image_url = data.get("image_url", None)  # ‚úÖ Nh·∫≠n ·∫£nh n·∫øu c√≥
    prompt_optimizer = data.get("prompt_optimizer", True)
    user_id = get_jwt_identity()
    user = User.query.get(user_id)

    if not user or not prompt:
        return jsonify({"error": "Thi·∫øu th√¥ng tin user ho·∫∑c prompt!"}), 400

    # ‚úÖ Ki·ªÉm tra t√≠n d·ª•ng ng∆∞·ªùi d√πng
    total_credits = db.session.query(
        func.coalesce(func.sum(UserPackage.user_package_credits), 0)
    ).filter(UserPackage.user_id == user.user_id).scalar()

    if total_credits < 2:
        return jsonify({"error": "B·∫°n kh√¥ng ƒë·ªß t√≠n d·ª•ng ƒë·ªÉ t·∫°o video!"}), 403

    # ‚úÖ G·ª≠i y√™u c·∫ßu ƒë·∫øn Replicate (truy·ªÅn th√™m `first_frame_image` n·∫øu c√≥)
    try:
        input_data = {
            "prompt": prompt,
            "prompt_optimizer": prompt_optimizer
        }

        if image_url:
            input_data["first_frame_image"] = image_url  # ‚úÖ Truy·ªÅn ·∫£nh v√†o request n·∫øu c√≥

        output_url = replicate.run("minimax/video-01", input=input_data)

        if not output_url:
            return jsonify({"error": "Kh√¥ng th·ªÉ t·∫°o video t·ª´ Replicate!"}), 500

    except Exception as e:
        return jsonify({"error": f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Replicate: {str(e)}"}), 500

    # ‚úÖ Ch·ªù t·ªëi ƒëa 8 ph√∫t (480 gi√¢y) ƒë·ªÉ l·∫•y k·∫øt qu·∫£ video
    start_time = time.time()
    while True:
        if time.time() - start_time > 480:
            return jsonify({"error": "Qu√° th·ªùi gian ch·ªù, vui l√≤ng th·ª≠ l·∫°i sau!"}), 500

        try:
            response = requests.get(output_url, timeout=30, stream=True)
            if response.status_code == 200:
                video_data = response.content
                break
        except:
            time.sleep(10)

    # ‚úÖ Upload video ƒë√£ t·∫°o l√™n Azure Storage
    blob_name = f"generated_{uuid.uuid4()}.mp4"
    processed_blob_client = blob_service_client.get_blob_client(container=CONTAINER_NAME_PROCESSED, blob=blob_name)
    processed_blob_client.upload_blob(video_data, overwrite=True)

    processed_url = f"https://{blob_service_client.account_name}.blob.core.windows.net/{CONTAINER_NAME_PROCESSED}/{blob_name}"

    # ‚úÖ L∆∞u video v√†o database
    new_video = Video(
        user_id=user_id,
        video_original_url=image_url if image_url else None,
        video_processed_url=processed_url
    )
    db.session.add(new_video)
    db.session.commit()

    # ‚úÖ Tr·ª´ t√≠n d·ª•ng ng∆∞·ªùi d√πng
    user_package = UserPackage.query.filter(UserPackage.user_id == user.user_id).first()
    if user_package:
        user_package.user_package_credits -= 2
        db.session.commit()

    return jsonify({"message": "Video ƒë√£ t·∫°o th√†nh c√¥ng!", "processed_video_url": processed_url})

# ‚úÖ **API: L·∫•y danh s√°ch video ƒë√£ t·∫°o**
@video01_blueprint.route("/videos", methods=["GET"])
@jwt_required()
def get_user_videos():
    user_id = get_jwt_identity()
    videos = Video.query.filter_by(user_id=user_id).all()

    if not videos:
        print("‚ùå Kh√¥ng t√¨m th·∫•y video n√†o trong CSDL!")  # Debug xem API c√≥ ch·∫°y kh√¥ng
        return jsonify({"videos": []})

    video_list = [{
        "original_url": vid.video_original_url if vid.video_original_url else "",
        "processed_url": vid.video_processed_url if vid.video_processed_url else ""
    } for vid in videos]

    print(f"‚úÖ Video t·∫£i l√™n: {video_list}")  # Debug danh s√°ch video tr·∫£ v·ªÅ
    return jsonify({"videos": video_list})


# ‚úÖ **Trang hi·ªÉn th·ªã giao di·ªán t·∫°o video**
@video01_blueprint.route("/", methods=["GET"])
@jwt_required()
def video01_page():
    return render_template("video01.html")


