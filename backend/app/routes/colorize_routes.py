from flask import Blueprint, request, jsonify, render_template
from backend.app.db import db
from backend.app.models import User, Image, UserPackage
from flask_jwt_extended import jwt_required, get_jwt_identity
from azure.storage.blob import BlobServiceClient
import os
import uuid
import requests
import replicate
from sqlalchemy.sql import func
import time
from flask_cors import CORS

# üîπ C·∫•u h√¨nh Azure Storage
AZURE_CONNECTION_STRING = os.getenv("AZURE_STORAGE_CONNECTION_STRING")
CONTAINER_NAME_ORIGINAL = "user-uploads"  # üìå ·∫¢nh g·ªëc t·∫£i l√™n
CONTAINER_NAME_PROCESSED = "color-image"  # üìå ·∫¢nh sau khi t√¥ m√†u
blob_service_client = BlobServiceClient.from_connection_string(AZURE_CONNECTION_STRING)

# üîπ API Token c·ªßa Replicate
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN")

colorize_blueprint = Blueprint("colorize", __name__)
CORS(colorize_blueprint)  # ‚úÖ Cho ph√©p t·∫•t c·∫£ origin truy c·∫≠p API

# ‚úÖ **API: T·∫£i ·∫£nh l√™n Azure Storage**
@colorize_blueprint.route("/upload", methods=["POST"])
@jwt_required()
def upload_image():
    user_id = get_jwt_identity()
    user = User.query.get(user_id)

    if not user:
        return jsonify({"error": "User kh√¥ng t·ªìn t·∫°i!"}), 400

    file = request.files.get("image")
    if not file:
        return jsonify({"error": "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n!"}), 400

    # ‚úÖ T·∫°o t√™n file ng·∫´u nhi√™n
    blob_name = f"{uuid.uuid4()}.jpg"

    # ‚úÖ Upload ·∫£nh l√™n Azure Storage
    blob_client = blob_service_client.get_blob_client(container=CONTAINER_NAME_ORIGINAL, blob=blob_name)
    blob_client.upload_blob(file.read(), overwrite=True)

    image_url = f"https://{blob_service_client.account_name}.blob.core.windows.net/{CONTAINER_NAME_ORIGINAL}/{blob_name}"

    # ‚úÖ L∆∞u v√†o database
    new_image = Image(user_id=user_id, image_original_url=image_url)
    db.session.add(new_image)
    db.session.commit()

    return jsonify({"message": "·∫¢nh ƒë√£ t·∫£i l√™n th√†nh c√¥ng!", "image_id": str(new_image.image_id), "image_url": image_url})


# ‚úÖ **API: G·ª≠i ·∫£nh ƒë·∫øn Replicate ƒë·ªÉ t√¥ m√†u**
@colorize_blueprint.route("/colorize", methods=["POST"])
@jwt_required()
def colorize_image():
    data = request.json
    image_url = data.get("image_url")
    user_id = get_jwt_identity()
    user = User.query.get(user_id)

    if not user or not image_url:
        return jsonify({"error": "Thi·∫øu th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c URL ·∫£nh!"}), 400

    # ‚úÖ Ki·ªÉm tra t√≠n d·ª•ng ng∆∞·ªùi d√πng
    total_credits = db.session.query(
        func.coalesce(func.sum(UserPackage.user_package_credits), 0)
    ).filter(UserPackage.user_id == user.user_id).scalar()

    if total_credits < 2:
        return jsonify({"error": "B·∫°n kh√¥ng ƒë·ªß t√≠n d·ª•ng ƒë·ªÉ t√¥ m√†u ·∫£nh!"}), 403

    # ‚úÖ G·ª≠i ·∫£nh ƒë·∫øn API Replicate
    try:
        output_image_url = replicate.run(
            "arielreplicate/deoldify_image:0da600fab0c45a66211339f1c16b71345d22f26ef5fea3dca1bb90bb5711e950",
            input={
                "model_name": "Artistic",
                "input_image": image_url,
                "render_factor": 35
            }
        )

        if not output_image_url:
            return jsonify({"error": "Kh√¥ng th·ªÉ t√¥ m√†u ·∫£nh!"}), 500

    except Exception as e:
        return jsonify({"error": f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn Replicate: {str(e)}"}), 500

    # ‚úÖ TƒÉng th·ªùi gian ch·ªù t·ªëi ƒëa l√™n 10 ph√∫t (600 gi√¢y)
    start_time = time.time()
    while True:
        if time.time() - start_time > 600:  # 10 ph√∫t
            return jsonify({"error": "Qu√° th·ªùi gian ch·ªù, vui l√≤ng th·ª≠ l·∫°i sau!"}), 500

        try:
            response = requests.get(output_image_url, timeout=30, stream=True)
            if response.status_code == 200:
                image_data = response.content
                break
        except:
            time.sleep(10)

    # ‚úÖ Upload ·∫£nh ƒë√£ t√¥ m√†u l√™n Azure
    blob_name = f"colorized_{uuid.uuid4()}.jpg"
    processed_blob_client = blob_service_client.get_blob_client(container=CONTAINER_NAME_PROCESSED, blob=blob_name)
    processed_blob_client.upload_blob(image_data, overwrite=True)

    processed_url = f"https://{blob_service_client.account_name}.blob.core.windows.net/{CONTAINER_NAME_PROCESSED}/{blob_name}"

    # ‚úÖ L∆∞u v√†o database
    image = Image.query.filter_by(image_original_url=image_url).first()
    if image:
        image.image_restored_url = processed_url
        db.session.commit()

    # ‚úÖ Tr·ª´ 2 t√≠n d·ª•ng c·ªßa ng∆∞·ªùi d√πng
    user_package = UserPackage.query.filter(UserPackage.user_id == user.user_id).first()
    if user_package:
        user_package.user_package_credits -= 2
        db.session.commit()

    return jsonify({"message": "·∫¢nh ƒë√£ t√¥ m√†u th√†nh c√¥ng!", "processed_image_url": processed_url})


# ‚úÖ **API: L·∫•y danh s√°ch ·∫£nh ƒë√£ t√¥ m√†u**
@colorize_blueprint.route("/images", methods=["GET"])
@jwt_required()
def get_user_images():
    user_id = get_jwt_identity()
    images = Image.query.filter_by(user_id=user_id).all()

    image_list = [{
        "original_url": img.image_original_url,
        "processed_url": img.image_restored_url or ""
    } for img in images]

    return jsonify({"images": image_list})


# ‚úÖ **Trang hi·ªÉn th·ªã giao di·ªán t√¥ m√†u ·∫£nh**
@colorize_blueprint.route("/", methods=["GET"])
@jwt_required()
def colorize_page():
    return render_template("colorize.html")
